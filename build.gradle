apply plugin: 'java'
apply plugin: 'eclipse' 
apply plugin: 'maven' 
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/JacocoReportDir")
}

archivesBaseName = 'demandspike'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

eclipse {
  project {
    name = 'DemandSpike'
  }

  classpath {
    downloadSources=true
  }
}

eclipse.classpath.defaultOutputDir = file( 'build/classes' )

group = 'com.neverwinterdp'
sourceCompatibility = 1.7
version = '1.0-SNAPSHOT'
configurations.compile.transitive = true

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "http://clojars.org/repo"
  }
}

configurations.all {
  exclude(group: 'ring', name: 'ring-core', version: '0.3.11')
}

dependencies {
    compile group: 'com.neverwinterdp', name: 'commons.utils', version: '1.0-SNAPSHOT'
    compile group: 'com.neverwinterdp', name: 'commons.netty', version: '1.0-SNAPSHOT', classifier: 'tests'
    compile group: 'com.neverwinterdp', name: 'commons.hadoop-framework', version: '1.0-SNAPSHOT'
    compile group: 'com.neverwinterdp', name: 'commons.hadoop-framework', version: '1.0-SNAPSHOT', classifier: 'tests'
    
    
    
  //compile group: 'com.neverwinterdp', name: 'commons.api', version: '1.0-SNAPSHOT'
  //compile group: 'com.neverwinterdp', name: 'commons.cluster', version: '1.0-SNAPSHOT'
  //compile group: 'com.neverwinterdp', name: 'commons.cluster', version: '1.0-SNAPSHOT', classifier: 'js'
  //compile group: 'com.neverwinterdp', name: 'commons.zookeeper', version: '1.0-SNAPSHOT'

  //testCompile group: 'com.neverwinterdp', name: 'commons.hadoop-framework', version: '1.0-SNAPSHOT', classifier: 'tests'

  //compile group: 'com.neverwinterdp', name: 'queuengin', version: '1.0-SNAPSHOT'
  //compile group: 'com.neverwinterdp', name: 'sparkngin', version: '1.0-SNAPSHOT'


//  compile group: 'com.yammer.metrics', name: 'metrics-core', version: '2,2.0'

compile group: 'com.hazelcast', name: 'hazelcast', version: '3.3'
  compile group: 'com.hazelcast', name: 'hazelcast-client', version: '3.3'
  //compile group: 'com.hazelcast', name: 'hazelcast-all', version: '3.3'
  
  
  compile group: 'com.codahale.metrics', name: 'metrics-core', version: '3.0.2'
  compile group: 'com.codahale.metrics', name: 'metrics-json', version: '3.0.2'
  
  compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.4.0'
  compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.4.0'

  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'

  compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.4.0'
  compile group: 'org.apache.mrunit', name: 'mrunit', version: '1.0.0', classifier: 'hadoop2'

  compile group: 'io.netty', name: 'netty-all', version: '4.0.20.Final'
  compile group: 'com.beust', name: 'jcommander', version: '1.35'
  
  compile group: 'org.apache.avro', name: 'avro', version: '1.7.4'
  

  testCompile group: 'junit', name: 'junit', version: '4.11'
  
  
}

test {
  forkEvery = 1
  ignoreFailures = true
  testLogging.showStandardStreams = true

  filter {
    includeTestsMatching "*Test"
  }
}

task release (dependsOn: 'build') << {
  def releaseDir = "${buildDir}/release/DemandSpike"
  doRelease(releaseDir) ;
}

def doRelease(String releaseDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the release directory ${releaseDir}"
  println "*************************************************"


  def dependencyJars = [ 
   // "commons.utils", "commons.api", "commons.cluster","commons.netty", "commons.zookeeper", "commons.hadoop-framework", "queuengin", "sparkngin",
   // "commons.utils","commons.cluster","commons.netty","commons.hadoop-framework",
   //"commons.utils",
    "commons.utils", "commons.hadoop-framework", "jackson-core-2.2.2", "jackson-databind", "jackson-annotations", "jcommander", "reflections", "guava", "javassist",
    'guice', 'javax.inject', 'hazelcast', 'aopalliance',
    "kafka", "scala-library",
    'zookeeper', 'zkclient',
    "netty-all", 'jzlib', 'chronicle', "lang-6.1.4",
    
    "hadoop-common", "hadoop-hdfs", "hadoop-auth", 
    "hadoop-yarn-api", "hadoop-yarn-common", "hadoop-yarn-client",
    "protobuf",

    "metrics-core", "metrics-json", "metrics-annotation",
    "commons-collections", "commons-configuration","commons-lang", "commons-cli",
    "log4j", "slf4j-api", "slf4j-log4j12", "commons-logging","avro",
    
    "hazelcast","hazelcast-client"
    
  ] ;

  println "Copy the dependency library"
  configurations.compile.each { File file -> 
    if(isIn(dependencyJars, file)) {
      println "  Copy $file.name to DemandSpike/libs"
      copy {
        from file
          into "${releaseDir}/libs"
      }
    } else {
      //println "Ignore $file.name "
    }
  }
  


  copy {
    from "${buildDir}/libs"
    into "${releaseDir}/libs"
  }

  def jarsForHadoop = [ 
    "commons.hadoop-framework", "commons.netty", "commons.utils", "jackson-core-2.2.2", "jackson-databind",
    "jackson-annotations", "jcommander","metrics-core", "netty-all","avro",
  ] 
    
  println "Copy the dependencies library for hadoop worker and AM"
  configurations.compile.each { File file -> 
    if(isIn(jarsForHadoop, file)) {
      println "  Copy $file.name to jarsForHadoop"
      copy {
        from file
        into "${releaseDir}/libs/jarsforhadoop"
      }
    }

  }
  copy {
    from "${buildDir}/libs"
    into "${releaseDir}/libs/jarsforhadoop"
  }

  println "Copy and override app"
  copy {
    from "src/app"
    into "${releaseDir}"
  }
}

task createYarnAppHome(dependsOn: 'build') << {
  def appHomeDir = "${buildDir}/DemandSpike"
  createYarnAppHome(appHomeDir)
}

def createYarnAppHome(String appHomeDir) {
  println "\n\n"
  println "*************************************************"
  println "Preparing the app home directory ${appHomeDir}"
  println "*************************************************"

  def jars = [ 
    "commons.utils", "commons.netty", "commons.hadoop-framework",
    "jackson-core-2.2.2", "jackson-databind", "jackson-annotations", "jcommander", "netty-all", "compiler-0.8.16"
  ] 

  println "Copy the dependencies library"
  configurations.compile.each { File file -> 
    if(isIn(jars, file)) {
      println "  Copy $file.name to $appHomeDir"
      copy {
        from file
        into "${appHomeDir}/libs"
      }
    }
  }

  copy {
    from "${buildDir}/libs"
    into "${appHomeDir}/libs"
  }
}


def isIn(set, File file) {
  for(item in set) {
    if(file.name.startsWith(item)) return true ;
  }
  return false ;
}
