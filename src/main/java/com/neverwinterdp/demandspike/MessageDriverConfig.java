package com.neverwinterdp.demandspike;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.beust.jcommander.Parameter;
import com.neverwinterdp.util.monitor.ApplicationMonitor;

public class MessageDriverConfig implements Serializable {
	@Parameter(names = "--driver", description = "The message driver to send the message. Either dummy, kafka or sparkngin")
	String driver = "dummy";

	@Parameter(names = "--broker-connect", variableArity = true, description = "The connection url list")
	List<String> connect = new ArrayList<String>();

	@Parameter(names = "--topic", description = "The destination topic of the message")
	String topic;

	@Parameter(names = "--requiredAcks", description = "This value controls when a produce request is considered completed.")
	private String requiredAcks;

	@Parameter(names = "--compressionCodec", description = "This parameter allows you to specify the compression codec for all data generated by this producer.")
	private String compressionCodec;

	@Parameter(names = "--sendBufferBytes", description = "Socket write buffer size.")
	private String sendBufferBytes;

	@Parameter(names = "--producerType", description = "This parameter specifies whether the messages are sent asynchronously in a background thread.")
	private String producerType;

	@Parameter(names = "--batchNumMessages", description = "The number of messages to send in one batch when using async mode.")
	private String batchNumMessages;

	@Parameter(names = "--enqueueTimeout", description = "The amount of time to block before dropping messages when running in async mode.")
	private String enqueueTimeout;

	@Parameter(names = "--clientId", description = "The client id is a user-specified string sent in each request to help trace calls.")
	private String clientId;

	@Parameter(names = "--requestTimeout", description = "The configuration controls the maximum amount of time the server will wait for acknowledgments.")
	private String requestTimeout;

	@Parameter(names = "--sendMaxRetries", description = "This property will cause the producer to automatically retry a failed send request.")
	private String sendMaxRetries;

	@Parameter(names = "--retryBackoff", description = " This property specifies the amount of time that the producer waits before refreshing the metadata.")
	private String retryBackoff;

	public List<String> getConnect() {
		return connect;
	}

	public String getTopic() {
		return topic;
	}

	public String getRequiredAcks() {
		return requiredAcks;
	}

	public String getCompressionCodec() {
		return compressionCodec;
	}

	public String getSendBufferBytes() {
		return sendBufferBytes;
	}

	public String getProducerType() {
		return producerType;
	}

	public String getBatchNumMessages() {
		return batchNumMessages;
	}

	public String getEnqueueTimeout() {
		return enqueueTimeout;
	}

	public String getClientId() {
		return clientId;
	}

	public String getRequestTimeout() {
		return requestTimeout;
	}

	public String getSendMaxRetries() {
		return sendMaxRetries;
	}

	public String getRetryBackoff() {
		return retryBackoff;
	}

	public String getDriver() {
		return this.driver;
	}

	public MessageDriver createDriver(ApplicationMonitor appMonitor) {
		MessageDriver mdriver = null;
		if ("kafka".equals(driver)) {
			mdriver = new KafkaMessageDriver(appMonitor);
		} else if ("sparkngin".equals(driver)) {
			mdriver = new HttpSparknginMessageDriver(appMonitor);
		} else {
			mdriver = new DummyMessageDriver();
		}
		mdriver.init(connect, topic,this);
		return mdriver;
	}
}